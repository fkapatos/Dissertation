import requests
import pandas as pd
import io
from IPython.display import display

def int_to_alpha(n):
    result = ""
    while True:
        result = chr(n % 26 + ord('a')) + result
        n //= 26
        if n == 0:
            break
        n -= 1
    return result


firms_df = pd.read_csv(csv_url)
firms_2020 = firms_df[firms_df["Year"] == 2020]
tickers = firms_2020["Ticker"].unique()
print(f"Found {len(tickers)} tickers for 2020.")

api_key = "APIKEY" #actual API key used redacted for security purposes

balance_sheet_endpoint = "https://financialmodelingprep.com/api/v3/balance-sheet-statement/{}?limit=30&apikey={}"
income_statement_endpoint = "https://financialmodelingprep.com/api/v3/income-statement/{}?limit=30&apikey={}"

bs_mapping = {
    "cashAndCashEquivalents": "Cash and Cash Equivalents",
    "netReceivables": "Accounts Receivable",
    "inventory": "Inventory",
    "otherCurrentAssets": "Other Current Assets",
    "totalCurrentAssets": "Total Current Assets",
    "propertyPlantEquipment": "Property Plant & Equipment",
    "intangibleAssets": "Intangible Assets",
    "otherNonCurrentAssets": "Other Non-Current Assets",
    "totalAssets": "Total Assets",
    "accountPayables": "Accounts Payable",
    "shortTermDebt": "Short-Term Debt",
    "otherCurrentLiabilities": "Other Current Liabilities",
    "totalCurrentLiabilities": "Total Current Liabilities",
    "longTermDebt": "Long-Term Debt",
    "otherNonCurrentLiabilities": "Other Non-Current Liabilities",
    "totalLiabilities": "Total Liabilities",
    "totalEquity": "Total Equity",
    "totalLiabilitiesAndStockholdersEquity": "Total Liabilities and Equity"
}

is_mapping = {
    "revenue": "Revenues",
    "costOfRevenue": "Cost of Goods Sold (COGS)",
    "grossProfit": "Gross Profit",
    "operatingExpenses": "Operating Expenses",
    "depreciationAndAmortization": "Depreciation and Amortization",
    "totalOperatingExpenses": "Total Operating Expenses",
    "operatingIncome": "Operating Income",
    "interestIncome": "Interest Income",
    "interestExpense": "Interest Expense",
    "otherNonOperatingItems": "Other Non-Operating Items",
    "incomeBeforeTax": "Pre-Tax Income",
    "incomeTaxExpense": "Income Tax Expense",
    "netIncome": "Net Income"
}

target_years = list(range(2013, 2021))  # [2013, 2014, ..., 2020]
year_cols = ["t", "t-1", "t-2", "t-3", "t-4", "t-5", "t-6", "t-7"]

results_list = []
excluded_firms = []
firm_order_dict = {}

for idx, symbol in enumerate(tickers):
    print(f"Processing {symbol} ...")
    
    bs_url = balance_sheet_endpoint.format(symbol, api_key)
    is_url = income_statement_endpoint.format(symbol, api_key)
    
    try:
        bs_response = requests.get(bs_url)
        bs_response.raise_for_status()
        is_response = requests.get(is_url)
        is_response.raise_for_status()
    except requests.RequestException as e:
        print(f"Error retrieving data for {symbol}: {e}")
        excluded_firms.append(symbol)
        continue
    
    bs_data = bs_response.json()
    is_data = is_response.json()
    
    filtered_bs = [record for record in bs_data if int(record["date"][:4]) in target_years]
    filtered_is = [record for record in is_data if int(record["date"][:4]) in target_years]
    
    if len(filtered_bs) != 8 or len(filtered_is) != 8:
        print(f"Skipping {symbol} due to insufficient records. BS: {len(filtered_bs)}, IS: {len(filtered_is)}")
        excluded_firms.append(symbol)
        continue
    
    filtered_bs.sort(key=lambda x: x["date"], reverse=True)
    filtered_is.sort(key=lambda x: x["date"], reverse=True)
    
    firm_anonymized = f"Firm{int_to_alpha(idx)}"
    firm_order_dict[firm_anonymized] = idx  # record original order
    
    for key, line_item in bs_mapping.items():
        row = {"Firm": firm_anonymized, "Line Item": line_item}
        for i, col in enumerate(year_cols):
            try:
                value = filtered_bs[i].get(key, None)
            except IndexError:
                value = None
            row[col] = value
        results_list.append(row)
    
    for key, line_item in is_mapping.items():
        row = {"Firm": firm_anonymized, "Line Item": line_item}
        for i, col in enumerate(year_cols):
            try:
                value = filtered_is[i].get(key, None)
            except IndexError:
                value = None
            row[col] = value
        results_list.append(row)

final_df = pd.DataFrame(results_list)

final_df["Firm_Order"] = final_df["Firm"].map(firm_order_dict)
final_df.sort_values("Firm_Order", inplace=True)
final_df.drop(columns=["Firm_Order"], inplace=True)

display(final_df)

csv_buffer = io.StringIO()
final_df.to_csv(csv_buffer, index=False, encoding="utf-8-sig")
csv_data = csv_buffer.getvalue()

print(csv_data)
print("Excluded firms due to incomplete data:")
print(excluded_firms)

print("Excluded firms due to incomplete data:")
print(excluded_firms)
